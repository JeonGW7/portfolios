AOP용어정리.txt

■ Aspect : 공통기능
	-cross-cutting concerns(공통 사용 부분) 가운데 특정 하나의 기능을 정의하여 모듈화한 객체
	-Advice(Aspect에 의해 실행 되는 기능)와 PointCut(적용하는 위치)을 결합 한것 
■ Advice
	-Aspect에 의해 실행되는 기능
	-Aspect기능 자체(클래스 내의 메서드)
■ JointPoint : Advice를 적용해야 하는 부분
			   (ex:필드,메서드 / 스프링에서는 메서드에만 해당된다)
	-어느 시점에서 AOP를 적용 할 것인가를 
	-어플리케이션 실행 과정에서 aspect을 적용할 수 있는  대상 지점을 말한다
	-대상 지점: 메서드 호출, 예외 발생, 필드 값 변경
	
■ PointCut : JointPoint부분을 실제로 Advice가 적용되는 부분
	-적용할 위치(클래스냐 메서드냐)
	-여러 JointPoint가운데 advice가 적용되는 위치를 정의 한다(where)
	-Advice의 JointPoint를 연결하는 규칙을 말한다
	-명시적 클래스, 메서드명, 정규표현식을 이용한 패턴 등
■ Weaving : Advice를 핵심 기능에 적용 하는 기능

*스프링에서 AOP구현 방법 : proxy를 이용한다
client(호출=요청)---->proxy---->target(핵심기능)
                                                부가기능 처리

■ target : 핵심부분
■ proxy : 대행자
■ weaving : 결합
	-Complie time : 컴파일 시점에서 Aspect과 결합한다
	-Classload time : target class가 JVM에 적재(load)되는 시점에서 aspect과 결합
	-Runtime : 어플리케이션이 실행되는 시점에서 target과 Aspect를 결합 한다
	
■ Advice : Aspect이 실행 되는 기능
  Aspect가 어떤 기능을 언제 적용되는지를 정의(what and when) 
  
  1)Before : target 메서드 실행전
  2)After-returning : target 메서드 실행 후
  3)After-throwing : 예외 발생
  4)Around (1,2,3 합친것)
      메서드 실행 전후  실행되는 Advice
  
