문서.txt

synchronized 제한자와 wait(), notify(), notifyAll() 이들 메서드를 함께 사용하여 
스레드 수행 순서를 조절 한다

두 스레드가 동시에 수행 될 수 없으며,
반드시 첫번째 스레드가 먼저 수행되어 데이터를 데이터 영역에(Vector)에 저장해야한다
또는 데이터 영역 크기(Vector크기)를 제한하여 적절한 시기에
두번째 스레드가 수행하게 한다 

이 경우
class MyThread{
	//Vector에 넣는 작업 
	synchronized void put(char c){
		while(작업을 할 수 없는 동안){//대기하게 한다 wait()
			try{
				wait();//현재 스레드를 기다리게 한다 
			}catch{Exception ex){}
		}//while-end
		//대기가 끝나면 처리하게 해준다 
		//처리 내용
		notifyAll(); //현재 스레드가 작업이 종료되었음을 모두(Thread)에게 알림 
	}//put-end
	//Vector에서 꺼내는 작업
	synchronized char get(){
		while(작업을 할 수 없는동안){
			try{
				wait();//현재 스레드를 기다리게 한다
			}catch(Exception ex){}
		}//while-end
		//대기가 끝나면 처리를 하게 한다 
		//처리 내용
		notifyAll(); //현재 스레드가 작업이 종료되었음을 모두(Thread)에게 알림   
	}//get-end
}//class-end
class 생산하는클래스{
	put()호출
}

class 소비하는클래스{
	get()호출
}

class 주클래스{
	main(){}
}
